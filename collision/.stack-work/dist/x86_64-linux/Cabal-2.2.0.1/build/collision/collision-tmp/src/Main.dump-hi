
==================== FINAL INTERFACE ====================
2018-09-27 21:47:29.867349541 UTC

interface main:Main 8043
  interface hash: 198e09ce8fe493b3bdf402a8d7f5c9f1
  ABI hash: 7344f100d6576bc5172c6c63fc016637
  export-list hash: 4adb78c77e3805647dcdfc593fdb2fd3
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4f10e15e8e8a84b5c15a8acc28e07070
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.inCorner
  Main.main
  Main.overlap
  Main.paddleCollision
  Main.range
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
5ee113812b0e1a5b7a4f62dbf4c2f068
  $winCorner ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Prim.Float#
    -> GHC.Types.Bool
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)><S,U><L,1*U(U)><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: GHC.Prim.Float#)
                   (ww3 :: GHC.Types.Float)
                   (ww4 :: GHC.Prim.Float#)
                   (ww5 :: GHC.Types.Float)
                   (ww6 :: GHC.Prim.Float#) ->
                 let {
                   y :: GHC.Prim.Float# = GHC.Prim.timesFloat# 0.5# ww2
                 } in
                 let {
                   $j :: GHC.Types.Bool <join 0>
                   = case ww5 of wild { GHC.Types.F# x ->
                     case ww1 of wild1 { GHC.Types.F# x1 ->
                     case ww3 of wild2 { GHC.Types.F# y1 ->
                     let {
                       y2 :: GHC.Prim.Float# = GHC.Prim.timesFloat# 0.3# y1
                     } in
                     case GHC.Prim.ltFloat# x (GHC.Prim.minusFloat# x1 y2) of lwild {
                       DEFAULT
                       -> case GHC.Prim.ltFloat#
                                 (GHC.Prim.minusFloat# x ww6)
                                 (GHC.Prim.plusFloat# x1 (GHC.Prim.timesFloat# 0.5# y1)) of lwild1 {
                            DEFAULT -> GHC.Types.False
                            1#
                            -> GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.ltFloat# (GHC.Prim.plusFloat# x1 y2) x) }
                       1#
                       -> let {
                            y3 :: GHC.Prim.Float# = GHC.Prim.timesFloat# 0.5# y1
                          } in
                          case GHC.Prim.ltFloat#
                                 (GHC.Prim.minusFloat# x1 y3)
                                 (GHC.Prim.plusFloat# x ww6) of lwild1 {
                            DEFAULT
                            -> case GHC.Prim.ltFloat#
                                      (GHC.Prim.minusFloat# x ww6)
                                      (GHC.Prim.plusFloat# x1 y3) of lwild2 {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.ltFloat# (GHC.Prim.plusFloat# x1 y2) x) }
                            1# -> GHC.Types.True } } } } }
                 } in
                 case GHC.Prim.ltFloat#
                        (GHC.Prim.minusFloat# ww4 ww6)
                        (GHC.Prim.plusFloat# ww y) of lwild {
                   DEFAULT
                   -> case GHC.Prim.ltFloat#
                             ww4
                             (GHC.Prim.minusFloat#
                                ww
                                (GHC.Prim.timesFloat# 0.3# ww2)) of lwild1 {
                        DEFAULT -> GHC.Types.False
                        1#
                        -> case GHC.Prim.ltFloat#
                                  (GHC.Prim.minusFloat# ww y)
                                  (GHC.Prim.plusFloat# ww4 ww6) of lwild2 {
                             DEFAULT -> GHC.Types.False 1# -> $j } }
                   1#
                   -> let {
                        y1 :: GHC.Prim.Float# = GHC.Prim.timesFloat# 0.3# ww2
                      } in
                      case GHC.Prim.ltFloat# (GHC.Prim.plusFloat# ww y1) ww4 of lwild1 {
                        DEFAULT
                        -> case GHC.Prim.ltFloat#
                                  ww4
                                  (GHC.Prim.minusFloat# ww y1) of lwild2 {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case GHC.Prim.ltFloat#
                                       (GHC.Prim.minusFloat# ww y)
                                       (GHC.Prim.plusFloat# ww4 ww6) of lwild3 {
                                  DEFAULT -> GHC.Types.False 1# -> $j } }
                        1# -> $j } }) -}
77fcba70947d4d236e5d56d25ef7764a
  $woverlap ::
    GHC.Classes.Ord a => a -> a -> a -> a -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLLLL),U(A,A,C(C1(U)),A,A,A,A,A)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: a)
                   (ww1 :: a)
                   (ww2 :: a)
                   (ww3 :: a) ->
                 case GHC.Classes.< @ a w ww ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.< @ a w ww2 ww1 }) -}
8ba1418bb817d33fe9c2d41f75c20006
  $wpaddleCollision ::
    GHC.Types.Float
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> GHC.Prim.Float#
    -> GHC.Prim.Float#
    -> GHC.Types.Bool
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,1*U(U)><S,U><L,1*U(U)><S,U><L,1*U(U)><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Float)
                   (ww1 :: GHC.Prim.Float#)
                   (ww2 :: GHC.Types.Float)
                   (ww3 :: GHC.Prim.Float#)
                   (ww4 :: GHC.Types.Float)
                   (ww5 :: GHC.Prim.Float#)
                   (ww6 :: GHC.Prim.Float#) ->
                 let {
                   y :: GHC.Prim.Float# = GHC.Prim.divideFloat# ww3 2.0#
                 } in
                 case GHC.Prim.ltFloat#
                        (GHC.Prim.minusFloat# ww5 ww6)
                        (GHC.Prim.plusFloat# ww1 y) of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case GHC.Prim.ltFloat#
                             (GHC.Prim.minusFloat# ww1 y)
                             (GHC.Prim.plusFloat# ww5 ww6) of lwild1 {
                        DEFAULT -> GHC.Types.False
                        1#
                        -> case ww4 of wild { GHC.Types.F# x ->
                           case ww of wild1 { GHC.Types.F# x1 ->
                           case ww2 of wild2 { GHC.Types.F# x2 ->
                           let {
                             y1 :: GHC.Prim.Float# = GHC.Prim.divideFloat# x2 2.0#
                           } in
                           case GHC.Prim.ltFloat#
                                  (GHC.Prim.minusFloat# x ww6)
                                  (GHC.Prim.plusFloat# x1 y1) of lwild2 {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.ltFloat#
                                     (GHC.Prim.minusFloat# x1 y1)
                                     (GHC.Prim.plusFloat# x ww6)) } } } } } }) -}
961ff18466a6446777fdfa704346182e
  inCorner ::
    (GHC.Types.Float, GHC.Types.Float)
    -> (GHC.Types.Float, GHC.Types.Float)
    -> (GHC.Types.Float, GHC.Types.Float)
    -> GHC.Types.Float
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (GHC.Types.Float, GHC.Types.Float))
                   (w1 :: (GHC.Types.Float, GHC.Types.Float))
                   (w2 :: (GHC.Types.Float, GHC.Types.Float))
                   (w3 :: GHC.Types.Float) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.F# ww4 ->
                 case w1 of ww5 { (,) ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.F# ww9 ->
                 case w2 of ww10 { (,) ww11 ww12 ->
                 case ww11 of ww13 { GHC.Types.F# ww14 ->
                 case w3 of ww15 { GHC.Types.F# ww16 ->
                 Main.$winCorner ww4 ww2 ww9 ww7 ww14 ww12 ww16 } } } } } } }) -}
34dc6310cd5784a5a5c4a74e3b09ab05
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
208b18fbf9bcdf7f6c67e790e259b955
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        GHC.Show.$fShowBool4
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        GHC.Show.$fShowBool2
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main2
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        GHC.Show.$fShowBool4
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        GHC.Show.$fShowBool2
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        GHC.Show.$fShowBool2
                        GHC.Types.True
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   GHC.Show.$fShowBool4
                   GHC.Types.True
                   ipv10 } } } } } }) -}
d71682972a91b00e483c32fbb098183d
  main10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
7665144087b18a7797466ca7f8865289
  main2 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)4
                   Main.main3) -}
f1de8115a13cea3c4c9f409e448c2172
  main3 :: [GHC.Types.Char]
  {- Unfolding: (case GHC.Show.$w$cshowsPrec4
                        0#
                        Main.main9
                        Main.main4 of ww2 { (#,#) ww3 ww4 ->
                 GHC.Types.: @ GHC.Types.Char ww3 ww4 }) -}
f46f3eacc8e35fdb151ae1fd70e960bf
  main4 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.showList__1
                   Main.main5) -}
beb2d1c04838a4c0e13c6db90107bdc7
  main5 :: GHC.Base.String
  {- Unfolding: (GHC.Show.$fShow(,)_$sgo1
                   Main.main8
                   Main.main6
                   (GHC.Types.[] @ GHC.Show.ShowS)) -}
65b451d60423c79aee10b8f17386fd52
  main6 :: GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <L,U>m2,
     Unfolding: (\ (w2 :: GHC.Base.String)[OneShot] ->
                 case GHC.Show.$w$cshowsPrec4
                        0#
                        Main.main7
                        w2 of ww2 { (#,#) ww3 ww4 ->
                 GHC.Types.: @ GHC.Types.Char ww3 ww4 }) -}
1471e6bd47d7008adc3b2d41db1dd2ff
  main7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (6) -}
c2c573f3555061fb15f0d7164fbccdb1
  main8 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6dcfd7b3a488af03fd3d33b0c86de25a
  main9 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
96081100d1b5b35dabe54c8b551d49f9
  overlap :: GHC.Classes.Ord a => (a, a) -> (a, a) -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLLLL),U(A,A,C(C1(U)),A,A,A,A,A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: GHC.Classes.Ord a) (w1 :: (a, a)) (w2 :: (a, a)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case w2 of ww3 { (,) ww4 ww5 ->
                 Main.$woverlap @ a w ww1 ww2 ww4 ww5 } }) -}
271599c311937f0c9aed39e80c6d1f95
  paddleCollision ::
    (GHC.Types.Float, GHC.Types.Float)
    -> (GHC.Types.Float, GHC.Types.Float)
    -> (GHC.Types.Float, GHC.Types.Float)
    -> GHC.Types.Float
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LS(S)),1*U(1*U(U),1*U(U))><S(LS(S)),1*U(1*U(U),1*U(U))><S(LS(S)),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (GHC.Types.Float, GHC.Types.Float))
                   (w1 :: (GHC.Types.Float, GHC.Types.Float))
                   (w2 :: (GHC.Types.Float, GHC.Types.Float))
                   (w3 :: GHC.Types.Float) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww2 of ww3 { GHC.Types.F# ww4 ->
                 case w1 of ww5 { (,) ww6 ww7 ->
                 case ww7 of ww8 { GHC.Types.F# ww9 ->
                 case w2 of ww10 { (,) ww11 ww12 ->
                 case ww12 of ww13 { GHC.Types.F# ww14 ->
                 case w3 of ww15 { GHC.Types.F# ww16 ->
                 Main.$wpaddleCollision
                   ww1
                   ww4
                   ww6
                   ww9
                   ww11
                   ww14
                   ww16 } } } } } } }) -}
062975ae7a5d1e0a3b2359af47c9d568
  range :: GHC.Num.Num a => a -> a -> (a, a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(1*C1(C1(U)),1*C1(C1(U)),A,A,A,A,A)><L,U><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (x :: a) (r :: a) ->
                 (GHC.Num.- @ a $dNum x r, GHC.Num.+ @ a $dNum x r)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

